import Head from "next/head";
import type {
    GetServerSidePropsContext,
    GetServerSidePropsResult,
    InferGetServerSidePropsType
} from "next";
import { useEffect, useState } from "react";

import { useFormatter } from "next-intl";

import clsx from "clsx";

import {
    ArrowDownTrayIcon,
    Cog6ToothIcon,
    FolderOpenIcon,
    UserPlusIcon
} from "@heroicons/react/24/outline";

import type { User } from "lucia";

import { auth } from "@/server/auth";
import { createCaller } from "@/server/api/root";

import Layout from "@/components/Layout";
import UserAvatar from "@/components/UserAvatar";

import loginRedirectWithOrigin from "@/utils/auth/loginRedirectWithOrigin";
import { type UploadGetRecentOutput, api } from "@/utils/api";

export const getServerSideProps = async (
    context: GetServerSidePropsContext
): Promise<
    GetServerSidePropsResult<{
        user: User;
    }>
> => {
    // Get session
    const authRequest = auth.handleRequest(context);
    const session = await authRequest.validate();

    // Redirect to login if not logged in
    if (!session)
        return loginRedirectWithOrigin(context);

    // Create API caller
    const apiCaller = await createCaller(context);

    // Get site settings
    const settings = await apiCaller.site.getSettings();

    // Redirect to setup if not set up
    if (!settings?.setup) {
        return {
            redirect: {
                destination: "/setup",
                permanent: false
            }
        }
    }

    return {
        props: {
            user: session.user
        }
    }
}

const actions = [
    {
        icon: FolderOpenIcon,
        name: "My Uploads",
        text: "View all the uploads you have submitted.",
        href: "#",
        iconForeground: "text-purple-500",
        iconBackground: "bg-purple-50",
    },
    {
        icon: ArrowDownTrayIcon,
        name: "Download",
        text: "Download the ShareX configuration file (.sxcu) for this site and account.",
        href: "#",
        iconForeground: "text-purple-500",
        iconBackground: "bg-purple-50",
    },
    {
        icon: UserPlusIcon,
        name: "Registration Requests",
        text: "Manage pending registration requests from users. (Admin only)",
        href: "#",
        iconForeground: "text-purple-500",
        iconBackground: "bg-purple-50",
    },
    {
        icon: Cog6ToothIcon,
        name: "Settings",
        text: "Manage the global settings for the site. (Admin only)",
        href: "#",
        iconForeground: "text-purple-500",
        iconBackground: "bg-purple-50",
    },
]

export default function Home(
    { user }:
        InferGetServerSidePropsType<typeof getServerSideProps>
) {
    const format = useFormatter();


    const [uploads, setUploads] = useState("");
    const [lastUploadedDate, setLastUploadedDate] = useState("");
    const [joinedDate, setJoinedDate] = useState("");

    const [recentUploadsData, setRecentUploadsData] = useState<UploadGetRecentOutput>([]);

    const [uploadCount, lastUploaded, joined] = api.useQueries(t => [
        t.user.getUploadCount(),
        t.user.getLastUploadDate(),
        t.user.getJoinedDate(),
    ])

    const recentUploads = api.upload.getRecent.useQuery()


    useEffect(() => {
        // Update upload count
        if (uploadCount.fetchStatus == "idle" && uploadCount.isSuccess)
            setUploads(uploadCount.data.toString());

        // Last uploaded date
        if (lastUploaded.fetchStatus == "idle" && lastUploaded.isSuccess) {
            if (lastUploaded.data)
                setLastUploadedDate(format.relativeTime(lastUploaded.data, new Date()));
            else
                setLastUploadedDate("never");
        }

        // Joined date
        if (joined.fetchStatus == "idle" && joined.isSuccess) {
            if (joined.data)
                setJoinedDate(format.relativeTime(joined.data, new Date()));
            else
                setJoinedDate("unknown");
        }

        // Recent uploads
        if (recentUploads.fetchStatus == "idle" && recentUploads.isSuccess) {
            setRecentUploadsData(recentUploads.data);
        }
    }, [uploadCount, lastUploaded])


    const stats = [
        { label: "Uploads", value: uploads },
        { label: "Last Uploaded", value: lastUploadedDate },
        { label: "Joined", value: joinedDate },
    ]

    return (
        <>
            <Layout user={user}>
                <Head>
                    <title>Create T3 App</title>
                    <meta name="description" content="Generated by create-t3-app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <div className="min-h-full">
                    <main className="mt-10 pb-8">
                        <div className="mx-auto max-w-3xl px-4 sm:px-6 lg:max-w-7xl lg:px-8">
                            <h1 className="sr-only">Profile</h1>
                            {/* Main 3 column grid */}
                            <div className="grid grid-cols-1 items-start gap-4 lg:grid-cols-3 lg:gap-8">
                                {/* Left column */}
                                <div className="grid grid-cols-1 gap-4 lg:col-span-2">
                                    {/* Welcome panel */}
                                    <section aria-labelledby="profile-overview-title">
                                        <div className="overflow-hidden rounded-lg bg-white shadow">
                                            <h2 className="sr-only" id="profile-overview-title">
                                                Profile Overview
                                            </h2>
                                            <div className="bg-white p-6">
                                                <div className="sm:flex sm:items-center sm:justify-between">
                                                    <div className="sm:flex sm:space-x-5">
                                                        <div className="flex-shrink-0">
                                                            <UserAvatar
                                                                src={user.avatar}
                                                                className="mx-auto h-20 w-20 rounded-full"
                                                                size={80}
                                                                fallbackClassName="h-20 w-20 text-gray-300"
                                                            />
                                                        </div>
                                                        <div className="mt-4 text-center sm:mt-0 sm:pt-1 sm:text-left">
                                                            <p className="text-sm font-medium text-gray-600">Welcome back,</p>
                                                            <p className="text-xl font-bold text-gray-900 sm:text-2xl">{user.discordUsername}</p>
                                                            <p className="text-sm font-medium text-gray-600">{"Super Admin"}</p>
                                                        </div>
                                                    </div>
                                                    <div className="mt-5 flex justify-center sm:mt-0">
                                                        <a
                                                            href="/me/profile"
                                                            className="flex items-center justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                                                        >
                                                            View profile
                                                        </a>
                                                    </div>
                                                </div>
                                            </div>
                                            <div className="grid grid-cols-1 divide-y divide-gray-200 border-t border-gray-200 bg-gray-50 sm:grid-cols-3 sm:divide-x sm:divide-y-0">
                                                {stats.map((stat) => (
                                                    <div key={stat.label} className="px-6 py-5 text-center text-sm font-medium">
                                                        <span className="text-gray-900">{stat.value}</span>{" "}
                                                        <span className="text-gray-600">{stat.label}</span>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                    </section>

                                    {/* Actions panel */}
                                    <section aria-labelledby="quick-links-title">
                                        <div className="divide-y divide-gray-200 overflow-hidden rounded-lg bg-gray-200 shadow sm:grid sm:grid-cols-2 sm:gap-px sm:divide-y-0">
                                            <h2 className="sr-only" id="quick-links-title">
                                                Quick links
                                            </h2>
                                            {actions.map((action, actionIdx) => (
                                                <div
                                                    key={action.name}
                                                    className={clsx(
                                                        actionIdx === 0 ? "rounded-tl-lg rounded-tr-lg sm:rounded-tr-none" : "",
                                                        actionIdx === 1 ? "sm:rounded-tr-lg" : "",
                                                        actionIdx === actions.length - 2 ? "sm:rounded-bl-lg" : "",
                                                        actionIdx === actions.length - 1 ? "rounded-bl-lg rounded-br-lg sm:rounded-bl-none" : "",
                                                        "group relative bg-white p-6 focus-within:ring-2 focus-within:ring-inset focus-within:ring-purple-500"
                                                    )}
                                                >
                                                    <div>
                                                        <span
                                                            className={clsx(
                                                                action.iconBackground,
                                                                action.iconForeground,
                                                                "inline-flex rounded-lg p-3 ring-4 ring-white"
                                                            )}
                                                        >
                                                            <action.icon className="h-6 w-6" aria-hidden="true" />
                                                        </span>
                                                    </div>
                                                    <div className="mt-8">
                                                        <h3 className="text-lg font-medium">
                                                            <a href={action.href} className="focus:outline-none">
                                                                {/* Extend touch target to entire panel */}
                                                                <span className="absolute inset-0" aria-hidden="true" />
                                                                {action.name}
                                                            </a>
                                                        </h3>
                                                        <p className="mt-2 text-sm text-gray-500">
                                                            {action.text}
                                                        </p>
                                                    </div>
                                                    <span
                                                        className="pointer-events-none absolute right-6 top-6 text-gray-300 group-hover:text-gray-400"
                                                        aria-hidden="true"
                                                    >
                                                        <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                                                            <path d="M20 4h1a1 1 0 00-1-1v1zm-1 12a1 1 0 102 0h-2zM8 3a1 1 0 000 2V3zM3.293 19.293a1 1 0 101.414 1.414l-1.414-1.414zM19 4v12h2V4h-2zm1-1H8v2h12V3zm-.707.293l-16 16 1.414 1.414 16-16-1.414-1.414z" />
                                                        </svg>
                                                    </span>
                                                </div>
                                            ))}
                                        </div>
                                    </section>
                                </div>

                                {/* Right column */}
                                <div className="grid grid-cols-1 gap-4">
                                    {/* Recent uploads */}
                                    <section aria-labelledby="recent-uploads-title">
                                        <div className="overflow-hidden rounded-lg bg-white shadow">
                                            <div className="p-6">
                                                <h2 className="text-base font-medium text-gray-900" id="recent-uploads-title">
                                                    Recent Uploads
                                                </h2>
                                                {
                                                    recentUploadsData.length ?
                                                        <RecentUploads recentUploadsData={recentUploadsData} format={format} /> :
                                                        (
                                                            <p className="mt-2 text-sm text-gray-500">
                                                                Recent uploads from all users across the site will appear here.
                                                                There are currently no uploads to display.
                                                            </p>
                                                        )
                                                }
                                            </div>
                                        </div>
                                    </section>
                                </div>
                            </div>
                        </div>
                    </main>
                </div>
            </Layout>
        </>
    );
}

function RecentUploads({
    recentUploadsData,
    format
}: {
    recentUploadsData: UploadGetRecentOutput;
    format: ReturnType<typeof useFormatter>;
}) {
    return (
        <>
            <div className="mt-6 flow-root">
                <ul role="list" className="-my-5 divide-y divide-gray-200">
                    {recentUploadsData.map(upload => (
                        <li key={upload.id} className="py-4">
                            <div className="flex items-center space-x-4">
                                <div className="flex-shrink-0">
                                    <UserAvatar
                                        src={upload.user.avatar}
                                        className="h-8 w-8 rounded-full"
                                        size={32}
                                        fallbackClassName="h-8 w-8 text-gray-300"
                                    />
                                </div>
                                <div className="min-w-0 flex-1">
                                    <p className="truncate text-sm font-medium text-gray-900">{upload.user.username}</p>
                                    <p className="truncate text-sm text-gray-500">{format.relativeTime(upload.createdAt, new Date())}</p>
                                </div>
                                <div>
                                    <a
                                        href="#"
                                        className="inline-flex items-center rounded-full bg-white px-2.5 py-1 text-xs font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                                    >
                                        View
                                    </a>
                                </div>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
            <div className="mt-6" hidden={true}>
                <a
                    href="/uploads"
                    className="flex w-full items-center justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                >
                    View all
                </a>
            </div>
        </>
    )
}
