import Head from "next/head";
import type {
    GetServerSidePropsContext,
    GetServerSidePropsResult,
    InferGetServerSidePropsType
} from "next";
import { type ReactNode, useEffect, useState } from "react";

import {
    LockOpenIcon,
    QuestionMarkCircleIcon,
    LockClosedIcon,
    ArrowsPointingInIcon,
    ArrowsPointingOutIcon,
} from "@heroicons/react/24/outline"

import type { User } from "lucia";

import moment from "moment";

import { auth } from "@/server/auth";
import { createCaller } from "@/server/api/root";

import Layout from "@/components/Layout";
import UserAvatar from "@/components/UserAvatar";
import RecentUploads from "@/components/RecentUploads";
import Role from "@/components/Role";

import { type UserGetUserByIDOutput, api } from "@/utils/api";
import loginRedirectWithOrigin from "@/utils/auth/loginRedirectWithOrigin";
import getRoleDisplayName from "@/utils/getRoleDisplayName";


export const getServerSideProps = async (
    context: GetServerSidePropsContext
): Promise<
    GetServerSidePropsResult<{
        user: User;
        slug: string;
    }>
> => {
    // Get session
    const authRequest = auth.handleRequest(context);
    const session = await authRequest.validate();

    // Redirect to login if not logged in
    if (!session)
        return loginRedirectWithOrigin(context);

    // Create API caller
    const apiCaller = await createCaller(context);

    // Get site settings
    const settings = await apiCaller.site.getSettings();

    // Redirect to setup if not set up
    if (!settings?.setup) {
        return {
            redirect: {
                destination: "/setup",
                permanent: false
            }
        }
    }

    // Check slug was provided
    if (!context.params?.user) {
        return {
            notFound: true
        }
    }

    // Get slug user data by ID
    const user = await apiCaller.user.getUserByID({ id: context.params.user as string });

    // Redirect to 404 if user not found
    if (!user) {
        return {
            notFound: true
        }
    }

    return {
        props: {
            user: session.user,
            slug: user.id,
        }
    }
}

export default function User(
    { user, slug }:
        InferGetServerSidePropsType<typeof getServerSideProps>
) {
    const [userData, setUserData] = useState<UserGetUserByIDOutput>(null);
    const [useReceivedRapSheets, setUseReceivedRapSheets] = useState(true);
    const [disableBanUserButton, setDisableBanUserButton] = useState(false);

    const slugUser = api.user.getUserByID.useQuery({ id: slug })
    const deleteUserSessions = api.user.deleteSessionsByID.useMutation();
    const unbanUser = api.user.unbanUserByID.useMutation();
    const banUser = api.user.banUserByID.useMutation();


    useEffect(() => {
        // Return if loading
        if (deleteUserSessions.isLoading)
            return;

        // Refresh page if slug user is current user
        if (userData?.id == user.userId) {
            location.reload();
        }
    }, [deleteUserSessions.isLoading])

    useEffect(() => {
        // Slug user
        if (slugUser.fetchStatus == "idle" && slugUser.isSuccess) {
            console.log("set user data", slugUser.data)
            setUserData(slugUser.data);
        }
    }, [slugUser])

    useEffect(() => {
        if (banUser.isLoading || unbanUser.isLoading || slugUser.isLoading) {
            setDisableBanUserButton(true);
        } else {
            setDisableBanUserButton(false);
        }
    }, [banUser, unbanUser])

    if (!userData)
        return null;

    const userStats = [
        { name: "Total Uploads", stat: userData._count.uploads },
        { name: "Rap Sheet Actions Received", stat: userData._count.receivedRapSheets },
        { name: "Rap Sheet Actions Issued", stat: userData._count.issuedRapSheets },
    ]


    return (
        <Layout user={user}>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            {/* Page header */}
            <div className="mx-auto max-w-3xl px-4 sm:px-6 md:flex md:items-center md:justify-between md:space-x-5 lg:max-w-7xl lg:px-8">
                <div className="flex items-center space-x-5">
                    <div className="flex-shrink-0">
                        <div className="relative">
                            <UserAvatar
                                src={userData.avatar}
                                className="h-16 w-16 rounded-full"
                                size={64}
                                fallbackClassName="h-20 w-20 text-gray-300"
                            />
                            <span className="absolute inset-0 rounded-full shadow-inner" aria-hidden="true" />
                        </div>
                    </div>
                    <div>
                        <h1 className="text-2xl font-bold text-gray-900">{userData.username}</h1>
                        <p className="text-sm font-medium text-gray-500">
                            {getRoleDisplayName(userData.role)}
                        </p>
                    </div>
                </div>
                <div className="mt-6 flex flex-col-reverse justify-stretch space-y-4 space-y-reverse sm:flex-row-reverse sm:justify-end sm:space-x-3 sm:space-y-0 sm:space-x-reverse md:mt-0 md:flex-row md:space-x-3">
                    <button
                        type="button"
                        className="inline-flex items-center justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600 disabled:opacity-50"
                        disabled={deleteUserSessions.isLoading}
                        onClick={() => deleteUserSessions.mutate({ id: userData.id })}
                    >
                        Delete sessions
                    </button>
                    {
                        userData.id != user.userId && (
                            <button
                                type="button"
                                className="inline-flex items-center justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600 disabled:opacity-50"
                                disabled={disableBanUserButton}
                                onClick={() => {
                                    const refetchUser = () => slugUser.refetch().catch(console.error);
                                    const options = {
                                        onSuccess: () => void refetchUser()
                                    }

                                    if (userData.banned) {
                                        unbanUser.mutate({ id: userData.id }, options)
                                    } else {
                                        banUser.mutate({ id: userData.id }, options)
                                    }
                                }}
                            >
                                {userData.banned ? "Revoke ban" : "Ban"}
                            </button>
                        )
                    }
                </div>
            </div>

            <div className="mx-auto mt-8 grid max-w-3xl grid-cols-1 gap-6 sm:px-6 lg:max-w-7xl lg:grid-flow-col-dense lg:grid-cols-3">
                <div className="space-y-6 lg:col-span-2 lg:col-start-1">
                    {/* Description list */}
                    <section aria-labelledby="applicant-information-title">
                        <div className="bg-white shadow sm:rounded-lg">
                            <div className="px-4 py-5 sm:px-6">
                                <h2 id="applicant-information-title" className="text-lg font-medium leading-6 text-gray-900">
                                    User Information
                                </h2>
                                <p className="mt-1 max-w-2xl text-sm text-gray-500">Personal details and data.</p>
                            </div>
                            <div className="border-t border-gray-200 px-4 py-5 sm:px-6">
                                <dl className="grid grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2">
                                    <div className="sm:col-span-1">
                                        <dt className="text-sm font-medium text-gray-500">ID</dt>
                                        <dd className="mt-1 text-sm text-gray-900">{userData.id}</dd>
                                    </div>
                                    <div className="sm:col-span-1">
                                        <dt className="text-sm font-medium text-gray-500">Username</dt>
                                        <dd className="mt-1 text-sm text-gray-900">{userData.username}</dd>
                                    </div>
                                    <div className="sm:col-span-1">
                                        <dt className="text-sm font-medium text-gray-500">Joined</dt>
                                        <dd className="mt-1 text-sm text-gray-900">
                                            {moment(userData.joinedAt).fromNow()}
                                            <br />
                                            <span className="text-xs text-gray-500">
                                                {moment(userData.joinedAt).format("D MMM YYYY h:mm A")}
                                            </span>
                                        </dd>
                                    </div>
                                    <div className="sm:col-span-1">
                                        <dt className="text-sm font-medium text-gray-500">Last Uploaded</dt>
                                        <dd className="mt-1 text-sm text-gray-900">
                                            {
                                                !userData.uploads[0]?.createdAt ?
                                                    "Never" :
                                                    <>
                                                        {moment(userData.uploads[0]?.createdAt).fromNow()}
                                                        <br />
                                                        <span className="text-xs text-gray-500">
                                                            {moment(userData.uploads[0]?.createdAt.toString()).format("D MMM YYYY h:mm A")}
                                                        </span>
                                                    </>
                                            }
                                        </dd>
                                    </div>
                                    <div className="sm:col-span-1">
                                        <dt className="text-sm font-medium text-gray-500">Role</dt>
                                        <dd className="mt-1 text-sm text-gray-900">
                                            <Role role={userData.role} />
                                        </dd>
                                    </div>
                                    <div className="sm:col-span-1">
                                        <dt className="text-sm font-medium text-gray-500">Banned</dt>
                                        <dd className="mt-1 text-sm text-gray-900">
                                            {
                                                !userData.banned ? (
                                                    <span className="inline-flex items-center rounded-md bg-green-50 px-2 py-1 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20">
                                                        No
                                                    </span>
                                                ) : (
                                                    <span className="inline-flex items-center rounded-md bg-red-50 px-2 py-1 text-xs font-medium text-red-700 ring-1 ring-inset ring-red-600/10">
                                                        Yes
                                                    </span>
                                                )
                                            }
                                        </dd>
                                    </div>
                                </dl>
                            </div>
                        </div>
                    </section>

                    {/* User stats */}
                    <section aria-labelledby="user-stats">
                        <dl className="mt-5 grid grid-cols-1 gap-5 sm:grid-cols-3">
                            {userStats.map((item) => (
                                <div key={item.name} className="overflow-hidden rounded-lg bg-white px-4 py-5 shadow sm:p-6">
                                    <dt className="truncate text-sm font-medium text-gray-500">{item.name}</dt>
                                    <dd className="mt-1 text-3xl font-semibold tracking-tight text-gray-900">{item.stat}</dd>
                                </div>
                            ))}
                        </dl>
                    </section>

                    {/* Comments */}
                    <section aria-labelledby="notes-title">
                        <div className="bg-white shadow sm:overflow-hidden sm:rounded-lg">
                            <div className="divide-y divide-gray-200">
                                <div className="px-4 py-5 sm:px-6 flex flex-row">
                                    <div>
                                        <h2 id="notes-title" className="text-lg font-medium text-gray-900">
                                            Rap Sheet
                                        </h2>
                                        <p className="mt-1 max-w-2xl text-sm text-gray-500">
                                            {userData.username}&apos;s rap sheet actions they have {useReceivedRapSheets ? "received" : "issued"}.
                                        </p>
                                    </div>

                                    <button
                                        type="button"
                                        className="ml-auto inline-flex items-center gap-x-2 rounded-md bg-purple-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-purple-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600"
                                        onClick={() => setUseReceivedRapSheets(!useReceivedRapSheets)}
                                    >
                                        {/* Button tex */}
                                        {useReceivedRapSheets ? "Received" : "Issued"}

                                        {/* Icon */}
                                        {useReceivedRapSheets ? (
                                            <ArrowsPointingInIcon className="-mr-0.5 h-5 w-5" aria-hidden="true" />
                                        ) : (
                                            <ArrowsPointingOutIcon className="-mr-0.5 h-5 w-5" aria-hidden="true" />
                                        )}
                                    </button>
                                </div>
                                <div className="px-4 py-6 sm:px-6">
                                    {
                                        (
                                            useReceivedRapSheets ?
                                                userData.receivedRapSheets :
                                                userData.issuedRapSheets
                                        ).length == 0 && (
                                            <div className="flex justify-center items-center">
                                                <div className="text-center">
                                                    <p className="text-sm font-mediu[m text-gray-900">
                                                        {userData.username} has not {useReceivedRapSheets ? "received" : "issued"} any rap sheet actions.
                                                    </p>
                                                </div>
                                            </div>
                                        )
                                    }

                                    <ul role="list" className="space-y-8">
                                        {(
                                            useReceivedRapSheets ?
                                                userData.receivedRapSheets :
                                                userData.issuedRapSheets
                                        ).map((rapSheet) => {
                                            const rapSheetIcon = getRapSheetTypeIcon(rapSheet.type);

                                            return (
                                                <li key={rapSheet.id}>
                                                    <div className="flex space-x-3">
                                                        <div className="flex-shrink-0">
                                                            {rapSheetIcon}
                                                        </div>
                                                        <div>
                                                            <div className="text-sm">
                                                                <span className="font-medium text-gray-900">
                                                                    {rapSheet.issuer.username}
                                                                    {" "}
                                                                    {getRapSheetTypeDisplayName(rapSheet.type).toLowerCase()}
                                                                    {" "}
                                                                    {/* {userData.username} */}
                                                                    {rapSheet.recipient.username}
                                                                </span>
                                                            </div>
                                                            {
                                                                rapSheet.reason && (
                                                                    <div className="mt-1 text-sm text-gray-700">
                                                                        <p>Reason: {rapSheet.reason}</p>
                                                                    </div>
                                                                )
                                                            }
                                                            <div className="mt-2 space-x-2 text-sm">
                                                                <span className="font-medium text-gray-500">{moment(rapSheet.occurredAt).fromNow()}</span>{" "}
                                                                <span className="font-medium text-gray-500">&middot;</span>{" "}

                                                                <a
                                                                    href={`/users/${(
                                                                        useReceivedRapSheets ?
                                                                            rapSheet.issuer :
                                                                            rapSheet.recipient
                                                                    ).id}`}
                                                                    className="font-medium text-gray-900"
                                                                >
                                                                    <div className="inline-flex items-center">
                                                                        <div>
                                                                            <UserAvatar
                                                                                src={(
                                                                                    useReceivedRapSheets ?
                                                                                        rapSheet.issuer :
                                                                                        rapSheet.recipient
                                                                                ).avatar}
                                                                                className="inline-block h-6 w-6 rounded-full"
                                                                                size={24}
                                                                                fallbackClassName="inline-block h-6 w-6 text-gray-300"
                                                                            />
                                                                        </div>

                                                                        <div className="ml-1">
                                                                            <p className="text-sm font-medium text-gray-700 group-hover:text-gray-900">
                                                                                {(
                                                                                    useReceivedRapSheets ?
                                                                                        rapSheet.issuer :
                                                                                        rapSheet.recipient
                                                                                ).username}
                                                                            </p>
                                                                        </div>
                                                                    </div>
                                                                </a>

                                                                {/* <span className="font-medium text-gray-500">-</span>

                                                                <a
                                                                    href={`/users/${rapSheet.recipient.id}`}
                                                                    className="font-medium text-gray-900"
                                                                >
                                                                    <div className="inline-flex items-center">
                                                                        <div>
                                                                            <UserAvatar
                                                                                src={rapSheet.recipient.avatar}
                                                                                className="inline-block h-6 w-6 rounded-full"
                                                                                size={24}
                                                                                fallbackClassName="inline-block h-6 w-6 text-gray-300"
                                                                            />
                                                                        </div>

                                                                        <div className="ml-1">
                                                                            <p className="text-sm font-medium text-gray-700 group-hover:text-gray-900">
                                                                                {rapSheet.recipient.username}
                                                                            </p>
                                                                        </div>
                                                                    </div>
                                                                </a> */}
                                                            </div>
                                                        </div>
                                                    </div>
                                                </li>
                                            )
                                        })}
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>

                {/* Recent uploads for user */}
                <RecentUploads userID={userData.id} />
            </div>
        </Layout>
    )
}

function getRapSheetTypeDisplayName(type: string) {
    switch (type.toLowerCase()) {
        case "ban":
            return "Banned";
        case "unban":
            return "Unbanned";
        default:
            return type;
    }
}

function getRapSheetTypeIcon(type: string): ReactNode {
    switch (type.toLowerCase()) {
        case "ban":
            return (
                <span
                    className="bg-red-50 text-red-500 inline-flex rounded-lg p-3 ring-4 ring-white"
                >
                    <LockClosedIcon className="h-6 w-6" aria-hidden="true" />
                </span>
            )

        case "unban":
            return (
                <span
                    className="bg-green-50 text-green-500 inline-flex rounded-lg p-3 ring-4 ring-white"
                >
                    <LockOpenIcon className="h-6 w-6" aria-hidden="true" />
                </span>
            )

        default:
            return (
                <span
                    className="bg-blue-50 text-blue-500 inline-flex rounded-lg p-3 ring-4 ring-white"
                >
                    <QuestionMarkCircleIcon className="h-6 w-6" aria-hidden="true" />
                </span>
            )
    }
}
